{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Scraping financial statements from EDGAR "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import bs4 as bs\n",
    "import requests\n",
    "import pandas as pd\n",
    "import re\n",
    "\n",
    "company = 'Facebook Inc'\n",
    "filing = '10-Q'\n",
    "year = 2020\n",
    "quarter = 'QTR3'\n",
    "#get name of all filings \n",
    "download = requests.get(f'https://www.sec.gov/Archives/edgar/full-index/{year}/{quarter}/master.idx').content\n",
    "download = download.decode(\"utf-8\").split('\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "edgar/data/1326801/0001326801-20-000076.txt\n",
      "edgar/data/1326801/000132680120000076\n",
      "https://www.sec.gov/Archives/edgar/data/1326801/000132680120000076/fb-06302020x10q.htm\n"
     ]
    }
   ],
   "source": [
    "#build the first part of the url\n",
    "for item in download:\n",
    "  #company name and report type\n",
    "  if (company in item) and (filing in item): \n",
    "    #print(item)\n",
    "    company = item\n",
    "    company = company.strip()\n",
    "    splitted_company = company.split('|')\n",
    "    url = splitted_company[-1]\n",
    "\n",
    "print(url) #edgar/data/1326801/0001326801-20-000076.txt\n",
    "\n",
    "url2 = url.split('-') \n",
    "url2 = url2[0] + url2[1] + url2[2]\n",
    "url2 = url2.split('.txt')[0]\n",
    "print(url2) #edgar/data/1326801/000132680120000076\n",
    "\n",
    "to_get_html_site = 'https://www.sec.gov/Archives/' + url\n",
    "data = requests.get(to_get_html_site).content\n",
    "data = data.decode(\"utf-8\") \n",
    "data = data.split('FILENAME>')\n",
    "#data[1]\n",
    "data = data[1].split('\\n')[0]\n",
    "\n",
    "url_to_use = 'https://www.sec.gov/Archives/'+ url2 + '/'+data\n",
    "print(url_to_use)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "resp = requests.get(url_to_use)\n",
    "soup = bs.BeautifulSoup(resp.text, 'lxml')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Analysing SEC Edgar Annual Reports with Python"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Sample questions: \n",
    "\n",
    "- What are the company key competitors?\n",
    "- What risks is the company facing?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['We compete with companies that sell advertising, as well as with companies that provide social, media, and communication products and services that are designed to engage users on mobile devices and online.', 'We face significant competition in every aspect of our business, including from companies that facilitate communication and the sharing of content and information, companies that enable marketers to display advertising, companies that distribute video and other forms of media content, and companies that provide development platforms for applications developers.', 'We compete with companies that offer products across broad platforms that replicate capabilities we provide.', 'For example, among other areas, we compete with Apple in messaging, Google and YouTube in advertising and video, Tencent and Snap in messaging and social media, ByteDance and Twitter in social media, and Amazon in advertising.', 'We also compete with companies that provide regional social networks and messaging products, many of which have strong positions in particular countries.', 'Some of our competitors may be domiciled in different countries and subject to political, legal, and regulatory regimes that enable them to compete more effectively than us.', 'In addition, we face competition from traditional, online, and mobile businesses that provide media for marketers to reach their audiences and/or\\xa0develop tools and systems for managing and optimizing advertising campaigns.', 'We also compete with companies that develop and deliver consumer hardware and virtual reality products and services.']\n",
      "['Our competitors may develop products, features, or services that are similar to ours or that achieve greater acceptance, may undertake more far-reaching and successful product development efforts or marketing campaigns, or may adopt more aggressive pricing policies.', 'In addition, developers whose mobile and web applications are integrated with Facebook or our other products may use information shared by our users through our products in order to develop products or features that compete with us.', 'Some competitors may gain a competitive advantage against us in areas where we operate, including: by making acquisitions; by limiting our ability to deliver, target, or measure the effectiveness of ads; by imposing fees or other charges related to our delivery of ads; by making access to our products more difficult or impossible; by making it more difficult to communicate with our users; or by integrating competing platforms, applications, or features into products they control such as mobile device operating systems, search engines, browsers, or e-commerce platforms.', 'For example, each of Apple and Google have integrated competitive products with iOS and Android, respectively.', 'In addition, Apple recently announced changes to iOS 14 that will limit our ability, and the ability of others in the digital advertising industry, to target and measure ads effectively.', 'As a result, our competitors may, and in some cases will, acquire and engage users or generate advertising or other revenue at']\n",
      "['We believe that our ability to compete effectively depends upon many factors both within and beyond our control, including:']\n",
      "['If we are not able to compete effectively, our user base and level of user engagement may decrease, we may become less attractive to developers and marketers, and our revenue and results of operations may be materially and adversely affected.']\n",
      "['We rely and expect to continue to rely on a combination of confidentiality, assignment, and license agreements with our employees, consultants, and third parties with whom we have relationships, as well as trademark, copyright, patent, trade secret, and domain name protection laws, to protect our proprietary rights.', 'In the United States and internationally, we have filed various applications for protection of certain aspects of our intellectual property, and we currently hold a significant number of registered trademarks and issued patents in multiple jurisdictions and have acquired patents and patent applications from third parties.', 'Third parties may knowingly or unknowingly infringe our proprietary rights, third parties may challenge proprietary rights held by us, and pending and future trademark and patent applications may not be approved.', 'In addition, effective intellectual property protection may not be available in every country in which we operate or intend to operate our business.', 'In any or all of these cases, we may be required to expend significant time and expense in order to prevent infringement or to enforce our rights.', 'Although we have generally taken measures to protect our proprietary rights, there can be no assurance that others will not offer products or concepts that are substantially similar to ours and compete with our business.', 'In addition, we regularly contribute software source code under open source licenses and have made other technology we developed available under other open licenses, and we include open source software in our products.', 'For example, we have contributed certain specifications and designs related to our data center equipment to the Open Compute Project Foundation, a non-profit entity that shares and develops such information with the technology community, under the Open Web Foundation License.', 'As a result of our open source contributions and the use of open source in our products, we may license or be required to license or disclose code and/or innovations that turn out to be material to our business and may also be exposed to increased litigation risk.', 'If the protection of our proprietary rights is inadequate to prevent unauthorized use or appropriation by third parties, the value of our brands and other intangible assets may be diminished and competitors may be able to more effectively mimic our products, services, and methods of operations.', 'Any of these events could have an adverse effect on our business and financial results.']\n",
      "['Companies in the Internet, technology, and media industries own large numbers of patents, copyrights, trademarks, and trade secrets, and frequently enter into litigation based on allegations of infringement, misappropriation, or other violations of intellectual property or other rights.', 'In addition, various \"non-practicing entities\" that own patents and other intellectual property rights often attempt to aggressively assert their rights in order to extract value from technology companies.', 'Furthermore, from time to time we may introduce or acquire new products, including in areas where we historically have not competed, which could increase our exposure to patent and other intellectual property claims from competitors and non-practicing entities.']\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package punkt to\n",
      "[nltk_data]     /Users/eunicepark/nltk_data...\n",
      "[nltk_data]   Package punkt is already up-to-date!\n"
     ]
    }
   ],
   "source": [
    "import nltk\n",
    "nltk.download('punkt')\n",
    "\n",
    "#Change word_to_analyze to search for keywords\n",
    "\n",
    "word_to_analyze = 'compete'\n",
    "for tag in soup.div.find_all_next('span'):\n",
    "    #print(type(tag))\n",
    "    tag = tag.getText()\n",
    "    #print(tag)\n",
    "    if word_to_analyze in tag:\n",
    "      sentences = nltk.sent_tokenize(tag)\n",
    "      result = [sentence for sentence in sentences]\n",
    "      print(result)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Scraping Balance Sheet from EDGAR using Python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " 5\n",
      "— 5\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>2020QTR3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>CashAndCashEquivalentsAtCarryingValue</th>\n",
       "      <td>21045</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AvailableForSaleSecuritiesDebtSecuritiesCurrent</th>\n",
       "      <td>37195</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AccountsReceivableNetCurrent</th>\n",
       "      <td>7483</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PrepaidExpenseAndOtherAssetsCurrent</th>\n",
       "      <td>2407</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AssetsCurrent</th>\n",
       "      <td>68130</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PropertyPlantAndEquipmentNet</th>\n",
       "      <td>39006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>OperatingLeaseRightOfUseAsset</th>\n",
       "      <td>9429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>IntangibleAssetsNetExcludingGoodwill</th>\n",
       "      <td>859</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Goodwill</th>\n",
       "      <td>19029</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>OtherAssetsNoncurrent</th>\n",
       "      <td>3238</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Assets</th>\n",
       "      <td>139691</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AccountsPayableCurrent</th>\n",
       "      <td>920</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AccountsPayableAndOtherAccruedLiabilitiesCurrent</th>\n",
       "      <td>729</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>OperatingLeaseLiabilityCurrent</th>\n",
       "      <td>899</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AccruedLiabilitiesCurrent</th>\n",
       "      <td>8496</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ContractWithCustomerLiabilityCurrent</th>\n",
       "      <td>264</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LiabilitiesCurrent</th>\n",
       "      <td>11308</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>OperatingLeaseLiabilityNoncurrent</th>\n",
       "      <td>9633</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>OtherLiabilitiesNoncurrent</th>\n",
       "      <td>8303</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Liabilities</th>\n",
       "      <td>29244</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CommitmentsAndContingencies</th>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CommonStockValue</th>\n",
       "      <td>—</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AdditionalPaidInCapital</th>\n",
       "      <td>47805</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AccumulatedOtherComprehensiveIncomeLossNetOfTax</th>\n",
       "      <td>-142</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RetainedEarningsAccumulatedDeficit</th>\n",
       "      <td>62784</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>StockholdersEquity</th>\n",
       "      <td>110447</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LiabilitiesAndStockholdersEquity</th>\n",
       "      <td>139691</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 2020QTR3\n",
       "CashAndCashEquivalentsAtCarryingValue               21045\n",
       "AvailableForSaleSecuritiesDebtSecuritiesCurrent     37195\n",
       "AccountsReceivableNetCurrent                         7483\n",
       "PrepaidExpenseAndOtherAssetsCurrent                  2407\n",
       "AssetsCurrent                                       68130\n",
       "PropertyPlantAndEquipmentNet                        39006\n",
       "OperatingLeaseRightOfUseAsset                        9429\n",
       "IntangibleAssetsNetExcludingGoodwill                  859\n",
       "Goodwill                                            19029\n",
       "OtherAssetsNoncurrent                                3238\n",
       "Assets                                             139691\n",
       "AccountsPayableCurrent                                920\n",
       "AccountsPayableAndOtherAccruedLiabilitiesCurrent      729\n",
       "OperatingLeaseLiabilityCurrent                        899\n",
       "AccruedLiabilitiesCurrent                            8496\n",
       "ContractWithCustomerLiabilityCurrent                  264\n",
       "LiabilitiesCurrent                                  11308\n",
       "OperatingLeaseLiabilityNoncurrent                    9633\n",
       "OtherLiabilitiesNoncurrent                           8303\n",
       "Liabilities                                         29244\n",
       "CommitmentsAndContingencies                              \n",
       "CommonStockValue                                        —\n",
       "AdditionalPaidInCapital                             47805\n",
       "AccumulatedOtherComprehensiveIncomeLossNetOfTax      -142\n",
       "RetainedEarningsAccumulatedDeficit                  62784\n",
       "StockholdersEquity                                 110447\n",
       "LiabilitiesAndStockholdersEquity                   139691"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def balance_Sheet(soup,year,quarter):\n",
    "  table = soup.find(text=\"Current assets:\").find_parent(\"table\")\n",
    "  items = []\n",
    "  values = []\n",
    "\n",
    "  dict_value = {}\n",
    "  dict_value[str(year) + quarter] = {}\n",
    "  name_key = 0\n",
    "\n",
    "  for row in table.findAll('tr')[3:]:\n",
    "      #1 Get name of the Table Row Index\n",
    "          try:\n",
    "            item = row.find(\"ix:nonfraction\").attrs['name']\n",
    "            item = item.replace('us-gaap:','')\n",
    "          except:\n",
    "            continue\n",
    "      #2 Get value and transform the number to an appropiate format\n",
    "          try:\n",
    "            value = row.find(\"ix:nonfraction\").text\n",
    "            \n",
    "            try:\n",
    "              value = value.replace(',','')\n",
    "            except:\n",
    "              \n",
    "              value\n",
    "            try:\n",
    "              value = value.replace('(','-')\n",
    "            except:\n",
    "\n",
    "              value\n",
    "            try:\n",
    "              #if there is a sign, we need to add it\n",
    "              sign = row.find(\"ix:nonfraction\")[\"sign\"]\n",
    "              value = sign + value \n",
    "            except:\n",
    "              value\n",
    "            try:\n",
    "              value = float(value)\n",
    "            except:\n",
    "              print(value + ' 5')\n",
    "          except:\n",
    "            value = ''\n",
    "        #3 Add elements to dictionaries\n",
    "          dict_value[str(year) + quarter][item] = value\n",
    "          \n",
    " #4Convert to DataFrames\n",
    "  BS = pd.DataFrame(dict_value)\n",
    "\n",
    "  #To keep the column order. No needed if Python version is higher than 3.7\n",
    "  #for dict value we need to have 2020QTR3\n",
    "  column_order = list(dict_value[str(year) + quarter].keys())\n",
    "\n",
    "  BS = BS.T\n",
    "  BS = BS[column_order]\n",
    "  BS = BS.T\n",
    "\n",
    "  return BS\n",
    "\n",
    "balance_Sheet(soup,year,quarter)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
